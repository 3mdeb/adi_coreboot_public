#!/usr/bin/perl -w

use strict;
use warnings;

use POSIX ":sys_wait_h";

$|++;

print "\n\n----------------------------------------------------\n";
print "Coreboot Update Utility for SPI Flash\n";
print "----------------------------------------------------\n";

print "\nThis utility must be executed in the same folder as the flashrom tool.\n"; 

# Check if user specified flash image file.
unless ($ARGV[0]) {
print "\nERROR: No flash image file specified!\n";
print "Syntax is flashupdate.ps imagefile\n";
print "Note that imagefile must have path specified if it is not in the same directory.\n";
print "Exiting...\n\n";
exit;
}

my $image_file = $ARGV[0];

# Check if user-specified flash image file exists.
unless (-e $image_file) {
print "\nERROR: Flash image file $image_file does not exist! Exiting...\n\n";
exit;
}

print "\nAbout to program boot flash with image file:";
print "\n$image_file\n";

print "\nThis will take 2-3 minutes. A string of dots indicate programming activity. \n";

print "\nCAUTION:  Do not power off the board, reboot the board, or interrupt the\n"; 
print "          procedure until programming is complete!\n";

print "\nPress Enter to start programming or CTRL-C to quit.\n"; 
<STDIN>;

print "\nAuto-detecting boot flash type...\n";
print "\nProgramming boot flash...\n\n";

my $pid = fork();
die "ERROR: Could not fork to child process!\n" if not defined $pid;

my $start;
my $end;
$start = time();

# Child process - program flash
if (not $pid) {

	# Auto-detect flash type and program it with image file. 
	# Suppress error outputs. There is a bug in flashrom where it spits out a bunch of errors
	# when auto-detecting flash type.
	`./flashrom -p internal:boardmismatch=force -w $image_file -V -o write_debug.log 2> /dev/null`;
	
	exit 3;
}

# Parent process - print a string of dots to indicate programming activity
while (1) {
	my $res = waitpid($pid, WNOHANG);

	print ". ";
	sleep(1);
 
	if ($res == -1) {
		print "\nError occurred during programming!", $? >> 8, "\n";;
		exit(1);
	}

	if ($res) {
		$end = time();
		last;
	}
}

print "\n\n...programming complete and verified. Elapsed time: " . ($end - $start) . " seconds\n\n\n";